import os
import argparse
from typing import Dict, Any
from pathlib import Path
from dotenv import load_dotenv

from .database import Database
from .extractor import QCMExtractor
from .models import QCM, Question, Option, Image

def setup_argparse() -> argparse.ArgumentParser:
    """Configure le parseur d'arguments"""
    parser = argparse.ArgumentParser(description="Extraction et import de QCM vers Supabase")
    parser.add_argument(
        "pdf_url",
        help="URL du PDF √† traiter"
    )
    parser.add_argument(
        "--metadata-only",
        action="store_true",
        help="Extraire uniquement les m√©tadonn√©es sans traiter le contenu"
    )
    return parser

def process_qcm(url: str) -> Dict[str, Any]:
    """Traite un QCM √† partir de son URL."""
    try:
        # Initialiser l'extracteur
        extractor = QCMExtractor()
        
        # Extraire les m√©tadonn√©es et traiter le QCM (questions et propositions)
        # La m√©thode extract_metadata_from_path s'occupe maintenant de tout, 
        # y compris la sauvegarde du QCM, des questions et des propositions.
        # Elle retourne les m√©tadonn√©es enrichies, incluant potentiellement 'qcm_db_id'.
        print(f"üöÄ Lancement du traitement complet pour l'URL: {url}")
        processed_metadata = extractor.extract_metadata_from_path(url)
        
        if not processed_metadata:
            # Cela peut arriver si download_pdf √©choue ou si la conversion markdown √©choue.
            print("‚ùå √âchec critique: Impossible d'obtenir les m√©tadonn√©es initiales ou le QCM de base.")
            return {
                'success': False,
                'error': "√âchec de l'extraction des m√©tadonn√©es initiales ou de la conversion Markdown."
            }

        qcm_id_from_extraction = processed_metadata.get('qcm_db_id')
        
        if qcm_id_from_extraction:
            print(f"‚úÖ Traitement du QCM (y compris questions/propositions) termin√©. ID du QCM: {qcm_id_from_extraction}")
            return {
                'success': True,
                'qcm_id': qcm_id_from_extraction,
                'metadata': processed_metadata  # Retourne toutes les m√©tadonn√©es collect√©es
            }
        else:
            # Ce cas peut survenir si la sauvegarde initiale du QCM dans save_to_supabase a √©chou√©
            # ou si qcm_db_id n'a pas √©t√© ajout√© correctement aux m√©tadonn√©es retourn√©es.
            # Les logs dans extractor.py devraient donner plus de d√©tails.
            print("‚ùå √âchec lors du traitement du QCM ou de la sauvegarde de l'entit√© QCM principale.")
            print("   Les m√©tadonn√©es de base pourraient avoir √©t√© extraites, mais l'enregistrement en BDD a pu √©chouer.")
            # On retourne quand m√™me les m√©tadonn√©es si elles existent, pour le d√©bogage.
            return {
                'success': False,
                'error': '√âchec de la sauvegarde du QCM principal dans la base de donn√©es ou ID manquant.',
                'metadata': processed_metadata # peut contenir des infos utiles m√™me en cas d'√©chec partiel
            }
            
    except Exception as e:
        import traceback
        print(f"‚ùå Erreur majeure impr√©vue lors du traitement du QCM: {str(e)}")
        print(f"Traceback: {traceback.format_exc()}")
        return {
            'success': False,
            'error': f"Erreur majeure: {str(e)}"
        }

def main():
    """Point d'entr√©e principal"""
    parser = setup_argparse()
    args = parser.parse_args()
    
    result = process_qcm(args.pdf_url)
    
    if result["success"]:
        print("‚ú® Traitement termin√© avec succ√®s!")
    else:
        print(f"‚ùå Erreur: {result['error']}")
        exit(1)

if __name__ == "__main__":
    main() 