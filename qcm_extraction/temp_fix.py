"""
Code temporaire pour corriger la fonction _extract_and_save_questions_only
A copier-coller dans extractor.py
"""

def _extract_and_save_questions_only(self, markdown_text: str, qcm_id: int) -> List[Dict[str, Any]]:
    """Phase 1: Extrait UNIQUEMENT les questions du texte Markdown page par page,
    les sauvegarde dans Supabase, et retourne les d√©tails des questions sauvegard√©es."""
    print(f"üìù Phase 1: Extraction des questions uniquement pour QCM ID: {qcm_id}...")
    
    # V√©rifier si des questions existent d√©j√† pour ce QCM
    try:
        existing_questions = self.supabase.table("questions").select("numero").eq("qcm_id", qcm_id).execute()
        existing_question_numbers = set()
        if existing_questions.data:
            existing_question_numbers = {q["numero"] for q in existing_questions.data if "numero" in q}
            print(f"‚ÑπÔ∏è {len(existing_question_numbers)} questions existent d√©j√† pour ce QCM")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la v√©rification des questions existantes: {str(e)}")
        existing_question_numbers = set()
    
    # Am√©liorer le d√©coupage des pages pour √©viter les pertes
    page_sections = []
    header_matches = list(re.finditer(r'^# Page \d+', markdown_text, flags=re.MULTILINE))
    
    if not header_matches:
        if markdown_text.strip(): 
            page_sections.append(markdown_text.strip())
            print("    üìÑ Document sans marqueurs de page, trait√© comme une seule section")
    else:
        # Extraire les sections de page avec une meilleure gestion des limites
        for i, match in enumerate(header_matches):
            start_content = match.end()
            end_content = header_matches[i+1].start() if (i + 1) < len(header_matches) else len(markdown_text)
            page_content = markdown_text[start_content:end_content].strip()
            
            # Extraire le num√©ro de page pour r√©f√©rence
            page_header = match.group(0)
            page_num = re.search(r'Page (\d+)', page_header)
            page_num = int(page_num.group(1)) if page_num else i + 1
            
            # Ajouter un chevauchement pour √©viter de perdre des questions √† la fronti√®re des pages
            if i > 0 and page_content:
                # Ajouter les 200 derniers caract√®res de la page pr√©c√©dente
                prev_start = header_matches[i-1].end()
                prev_content = markdown_text[prev_start:start_content].strip()
                overlap = prev_content[-200:] if len(prev_content) > 200 else prev_content
                page_content = overlap + "\n\n" + page_content
            
            if page_content: 
                page_sections.append(page_content)
                print(f"    üìÑ Section de page {i+1} correspond √† la Page {page_num} du PDF")
            else:
                print(f"    ‚ö†Ô∏è Section de page {i+1} (Page {page_num} du PDF) est vide apr√®s nettoyage")

    if not page_sections:
        print("‚ÑπÔ∏è Aucun contenu de page trouv√© pour l'extraction des questions.")
        return []

    # Traiter toutes les pages d'un coup si contenu total raisonnable
    total_content_length = sum(len(section) for section in page_sections)
    all_questions_from_all_pages_api_data = []
    
    # Strat√©gie adaptative: traiter en une fois si contenu petit, sinon par pages
    if total_content_length < 40000 and len(page_sections) <= 3:
        print(f"üìÑ Document de taille raisonnable ({total_content_length} caract√®res), traitement en une fois...")
        combined_content = "\n\n".join(page_sections)
        
        # Tronquer si n√©cessaire tout en gardant un maximum de contenu
        truncated_content = combined_content[:40000]
        
        # Utiliser un prompt plus pr√©cis pour extraire toutes les questions
        prompt = f"""Tu es un expert en analyse de QCM (Questionnaires √† Choix Multiples).
        √Ä partir du contenu Markdown d'un document QCM fourni ci-dessous, identifie et extrais CHAQUE question.
        
        INSTRUCTIONS CRUCIALES:
        1. Assure-toi d'identifier TOUTES les questions, en particulier celles num√©rot√©es de 1 √† 50.
        2. V√âRIFIE ATTENTIVEMENT que les num√©ros de questions se suivent correctement (1, 2, 3, etc.).
        3. SI TU REP√àRES DES NUM√âROS MANQUANTS (par exemple, si tu vois Q15 puis Q19), RECHERCHE SP√âCIFIQUEMENT ces questions manquantes.
        4. Examine minutieusement tout le texte pour trouver les questions qui pourraient √™tre mal format√©es ou difficiles √† d√©tecter.
        5. Accorde une attention particuli√®re aux sections de texte qui pourraient contenir les questions Q16, Q17 et Q18 qui sont souvent manquantes.

        Pour chaque question, tu dois fournir :
        1. Le num√©ro de la question (par exemple, 1, 2, 3) tel qu'il appara√Æt dans le document.
        2. Le texte int√©gral de la question uniquement (sans les choix de r√©ponses A,B,C,D,E).
        
        Contenu Markdown du document √† analyser :
        ---
        {truncated_content}
        ---

        Retourne les questions extraites sous la forme d'un objet JSON avec cette structure:
        {{
          "questions": [
            {{"numero": 1, "contenu": "Texte de la question 1"}},
            {{"numero": 2, "contenu": "Texte de la question 2"}},
            ...etc pour toutes les questions...
          ]
        }}
        """
        
        try:
            # Utiliser un mod√®le plus puissant pour l'extraction compl√®te
            messages = [UserMessage(content=prompt)]
            response = self._call_api_with_retry(
                self.client.chat.complete,
                model="mistral-medium-latest", 
                messages=messages,
                temperature=0.0,
                response_format={"type": "json_object"}
            )
            
            # V√©rifier si l'appel API a √©chou√©
            if response is None:
                print("    ‚ùå √âchec de l'appel API pour l'extraction globale des questions")
                # Continuer avec les autres m√©thodes d'extraction
                pass
            elif response.choices and response.choices[0].message and response.choices[0].message.content:
                extracted_data_str = response.choices[0].message.content
                try:
                    raw_data = json.loads(extracted_data_str)
                    if isinstance(raw_data, dict) and "questions" in raw_data and isinstance(raw_data["questions"], list):
                        all_questions_from_all_pages_api_data = raw_data["questions"]
                        print(f"    ‚úÖ Extraction globale r√©ussie: {len(all_questions_from_all_pages_api_data)} questions trouv√©es")
                except json.JSONDecodeError as e_json:
                    print(f"    ‚ö†Ô∏è Erreur JSON dans l'extraction globale: {e_json}")
            else:
                print(f"    ‚ö†Ô∏è R√©ponse API invalide pour l'extraction globale")
        except Exception as e_api:
            print(f"    üî• Erreur API pour l'extraction globale: {str(e_api)}")
    
    # Si l'extraction globale a √©chou√© ou n'a pas √©t√© tent√©e, traiter page par page
    if not all_questions_from_all_pages_api_data:
        print(f"üìÑ Traitement page par page ({len(page_sections)} sections)...")
        
        for i, page_markdown_content in enumerate(page_sections):
            print(f"üìÑ Traitement section {i + 1}/{len(page_sections)} pour questions...")
            
            if not page_markdown_content.strip():
                print(f"    ‚è© Section de page {i + 1} vide, ignor√©e pour questions.")
                continue

            truncated_page_markdown = page_markdown_content[:25000]

            # Ajouter une instruction sp√©cifique pour chercher les questions souvent manquantes
            prompt = f"""Tu es un expert en analyse de QCM (Questionnaires √† Choix Multiples).
            √Ä partir du contenu Markdown d'une section de page d'un document QCM fourni ci-dessous, identifie et extrais chaque question.

            INSTRUCTIONS CRUCIALES:
            1. Cherche ATTENTIVEMENT toutes les questions, particuli√®rement les questions Q16, Q17 et Q18 qui sont souvent manquantes.
            2. Examine chaque paragraphe, m√™me ceux qui semblent mal format√©s.
            3. Une question commence g√©n√©ralement par "Q" suivi d'un num√©ro (ex: Q16, Q17).
            4. Assure-toi de ne manquer AUCUNE question, m√™me si elle est mal format√©e.

            Pour chaque question, tu dois fournir :
            1. Le num√©ro de la question (par exemple, 1, 2, 3) tel qu'il appara√Æt sur la page.
            2. Le texte int√©gral de la question. Cela inclut toute phrase d'introduction ou contexte faisant partie de la question elle-m√™me.
               EXCLUS IMP√âRATIVEMENT : Les options √† choix multiples (A,B,C,D,E), les corrections, ou les justifications.
            
            IMPORTANT: Assure-toi d'extraire TOUTES les questions pr√©sentes dans ce texte, m√™me si elles semblent incompl√®tes.

            Contenu Markdown de la section de page √† analyser :
            ---
            {truncated_page_markdown}
            ---

            Retourne les questions extraites sous la forme d'un objet JSON. Cet objet doit contenir une unique cl√© "questions",
            dont la valeur est une liste d'objets. Chaque objet dans la liste repr√©sente une question et doit avoir
            les cl√©s "numero" (un entier) et "contenu" (une cha√Æne de caract√®res pour le texte de la question).
            Si aucune question n'est trouv√©e sur cette section de page, la liste "questions" doit √™tre vide.

            Exemple de format de retour attendu :
            {{
              "questions": [
                {{"numero": 1, "contenu": "Quelle est la formule chimique de l'eau ?"}},
                {{"numero": 2, "contenu": "Concernant la photosynth√®se, laquelle des affirmations suivantes est correcte ?"}}
              ]
            }}
            """
            try:
                messages = [UserMessage(content=prompt)]
                response = self._call_api_with_retry(
                    self.client.chat.complete,
                    model="mistral-small-latest", 
                    messages=messages,
                    temperature=0.0,
                    response_format={"type": "json_object"}
                )
                
                # V√©rifier si l'appel API a √©chou√©
                if response is None:
                    print(f"    ‚ùå √âchec de l'appel API pour l'extraction de la section {i+1}")
                    continue
                
                if response.choices and response.choices[0].message and response.choices[0].message.content:
                    extracted_data_str = response.choices[0].message.content
                    try:
                        raw_page_data = json.loads(extracted_data_str)
                        page_questions_list = []
                        if isinstance(raw_page_data, dict):
                            page_questions_list = raw_page_data.get("questions", [])
                        elif isinstance(raw_page_data, list): 
                            page_questions_list = raw_page_data
                        
                        if not isinstance(page_questions_list, list):
                            print(f"    ‚ö†Ô∏è Format de questions inattendu pour section {i+1} (pas une liste). Re√ßu: {page_questions_list}")
                            continue
                        
                        # D√©ballage am√©lior√© de la liste des questions
                        actual_questions_for_page = []
                        if not page_questions_list: # G√®re une liste vide retourn√©e par .get("questions", []) ou par l'API
                            pass # actual_questions_for_page reste vide
                        elif len(page_questions_list) == 1 and \
                             isinstance(page_questions_list[0], dict) and \
                             "questions" in page_questions_list[0] and \
                             isinstance(page_questions_list[0]["questions"], list):  # G√©rer le cas o√π l'API retourne un dict imbriqu√©
                            actual_questions_for_page = page_questions_list[0]["questions"]
                        else:
                            actual_questions_for_page = page_questions_list
                        
                        # Ajouter les questions de cette page
                        print(f"    ‚úÖ {len(actual_questions_for_page)} questions trouv√©es dans la section {i+1}")
                        all_questions_from_all_pages_api_data.extend(actual_questions_for_page)
                    except json.JSONDecodeError as e:
                        print(f"    ‚ö†Ô∏è Erreur JSON dans l'extraction pour la section {i+1}: {str(e)}")
                else:
                    print(f"    ‚ö†Ô∏è R√©ponse API invalide pour la section {i+1}")
            except Exception as e:
                print(f"    ‚ö†Ô∏è Erreur lors de l'extraction des questions pour la section {i+1}: {str(e)}")
            
            time.sleep(2)  # R√©duit √† 2 secondes au lieu de 5

    # Apr√®s avoir extrait toutes les questions, v√©rifier s'il y a des num√©ros manquants
    all_questions = all_questions_from_all_pages_api_data
    
    # Trier les questions par num√©ro
    all_questions.sort(key=lambda q: q["numero"] if isinstance(q["numero"], int) else int(q["numero"]))
    
    # V√©rifier s'il manque des num√©ros de questions (trous dans la s√©quence)
    if all_questions:
        question_numbers = [q["numero"] if isinstance(q["numero"], int) else int(q["numero"]) for q in all_questions]
        expected_numbers = list(range(min(question_numbers), max(question_numbers) + 1))
        missing_numbers = set(expected_numbers) - set(question_numbers)
        
        if missing_numbers:
            print(f"‚ö†Ô∏è ATTENTION: Questions manquantes d√©tect√©es: {sorted(missing_numbers)}")
            print(f"   V√©rifiez le PDF source pour ces questions.")
    
    if not all_questions_from_all_pages_api_data:
        print("‚ÑπÔ∏è Aucune question trouv√©e dans le document apr√®s traitement de toutes les pages.")
        return []

    print(f"üìä Total de {len(all_questions_from_all_pages_api_data)} questions collect√©es (brutes API).")
    
    # D√©duplication des questions par num√©ro
    # Nous conservons la question avec le contenu le plus long pour chaque num√©ro
    questions_by_number = {}
    for q_api_data in all_questions_from_all_pages_api_data:
        if not isinstance(q_api_data, dict):
            continue
        
        try:
            numero = int(q_api_data["numero"])
            contenu_text = str(q_api_data["contenu"]).strip()
            
            if not contenu_text:
                print(f"‚ö†Ô∏è Contenu de question vide pour num√©ro {numero} (API), ignor√©.")
                continue
            
            # Si le num√©ro existe d√©j√†, garde la version avec le contenu le plus long
            if numero in questions_by_number:
                existing_content = questions_by_number[numero]["contenu"]
                if len(contenu_text) > len(existing_content):
                    questions_by_number[numero] = {"numero": numero, "contenu": contenu_text}
            else:
                questions_by_number[numero] = {"numero": numero, "contenu": contenu_text}
            
        except (ValueError, TypeError) as e:
            print(f"‚ö†Ô∏è Erreur de type/valeur pour q API data {q_api_data}: {e}")
            continue
    
    # V√©rifier s'il y a des √©carts dans les num√©ros de questions
    all_question_numbers = sorted(questions_by_number.keys())
    if all_question_numbers:
        expected_range = list(range(min(all_question_numbers), max(all_question_numbers) + 1))
        missing_questions = set(expected_range) - set(all_question_numbers)
        if missing_questions:
            print(f"‚ö†Ô∏è Questions manquantes dans la s√©quence: {sorted(missing_questions)}")
    
    # Cr√©er liste finale pour insertion, en filtrant les questions d√©j√† existantes
    questions_to_insert_in_supabase = []
    for numero, q_data in questions_by_number.items():
        # Ne pas r√©ins√©rer les questions qui existent d√©j√†
        if numero in existing_question_numbers:
            print(f"‚ÑπÔ∏è Question {numero} existe d√©j√†, ignor√©e pour insertion.")
            continue
            
        questions_to_insert_in_supabase.append({
            "qcm_id": qcm_id,
            "numero": numero, 
            "contenu": json.dumps({"text": q_data["contenu"]}),  # Converti en JSON pour le champ jsonb
            "uuid": str(uuid.uuid4()) 
        })

    saved_questions_details = []
    
    # Si certaines questions existent d√©j√†, r√©cup√©rer leurs d√©tails
    if existing_question_numbers:
        try:
            for numero in existing_question_numbers:
                result = self.supabase.table("questions").select("id", "uuid").eq("qcm_id", qcm_id).eq("numero", numero).execute()
                if result.data:
                    for q in result.data:
                        saved_questions_details.append({
                            "db_uuid": q.get("id"),
                            "qcm_id": qcm_id,
                            "numero": numero
                        })
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la r√©cup√©ration des questions existantes: {str(e)}")
    
    # Ins√©rer les nouvelles questions
    if questions_to_insert_in_supabase:
        print(f"üíæ Sauvegarde de {len(questions_to_insert_in_supabase)} nouvelles questions dans Supabase...")
        try:
            # Insertion par lots pour am√©liorer les performances
            chunk_size = 50
            for i in range(0, len(questions_to_insert_in_supabase), chunk_size):
                chunk = questions_to_insert_in_supabase[i:i + chunk_size]
                result_q = self.supabase.table("questions").insert(chunk).execute()
                
                if result_q.data:
                    print(f"‚úÖ Lot de {len(result_q.data)} questions sauvegard√© dans Supabase.")
                    for db_q_data in result_q.data:
                        saved_questions_details.append({
                            "db_uuid": db_q_data.get("id"),
                            "qcm_id": db_q_data.get("qcm_id"), 
                            "numero": db_q_data.get("numero")  
                        })
                else:
                    print(f"‚ö†Ô∏è Aucune donn√©e retourn√©e par Supabase pour un lot de {len(chunk)} questions.")
        except Exception as e_insert_q: 
            print(f"üî• Erreur lors de l\'insertion des questions dans Supabase: {str(e_insert_q)}")
    else:
        print("‚ÑπÔ∏è Aucune nouvelle question √† sauvegarder.")
    
    # Filtrer les entr√©es incompl√®tes
    saved_questions_details = [
        q for q in saved_questions_details 
        if q.get("db_uuid") and q.get("qcm_id") is not None and q.get("numero") is not None
    ]
    
    print(f"üìä Total de {len(saved_questions_details)} questions disponibles pour la suite du traitement.")
    return saved_questions_details 