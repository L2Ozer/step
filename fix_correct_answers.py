#!/usr/bin/env python3
"""
Script de correction et int√©gration des r√©ponses correctes
Objectif: Diagnostiquer pourquoi toutes les r√©ponses sont FALSE et corriger le probl√®me
"""

import os
import sys
from pathlib import Path

# Ajouter le chemin du module
sys.path.append(str(Path(__file__).parent / "qcm_extraction"))

from extractor import QCMExtractor

def diagnose_current_state():
    """Diagnostique l'√©tat actuel des r√©ponses correctes dans la base de donn√©es"""
    print("üîç DIAGNOSTIC DES R√âPONSES CORRECTES")
    print("=" * 50)
    
    try:
        extractor = QCMExtractor()
        
        # 1. V√©rifier les QCM existants
        qcms = extractor.supabase.table('qcm').select('id, type, annee').execute()
        if not qcms.data:
            print("‚ùå Aucun QCM trouv√© dans la base de donn√©es")
            return None
        
        print(f"üìä {len(qcms.data)} QCM(s) trouv√©(s):")
        for qcm in qcms.data:
            print(f"   - QCM ID {qcm['id']}: {qcm['type']} ({qcm['annee']})")
        
        # 2. Pour chaque QCM, analyser l'√©tat des r√©ponses
        qcm_stats = {}
        
        for qcm in qcms.data:
            qcm_id = qcm['id']
            
            # Compter les questions
            questions = extractor.supabase.table('questions').select('id, numero').eq('qcm_id', qcm_id).execute()
            questions_count = len(questions.data) if questions.data else 0
            
            # Compter les propositions par statut
            if questions.data:
                total_props = 0
                correct_props = 0
                incorrect_props = 0
                
                for q in questions.data:
                    q_id = q['id']
                    props = extractor.supabase.table('reponses').select('est_correcte').eq('question_id', q_id).execute()
                    
                    if props.data:
                        total_props += len(props.data)
                        for prop in props.data:
                            if prop['est_correcte']:
                                correct_props += 1
                            else:
                                incorrect_props += 1
                
                qcm_stats[qcm_id] = {
                    'questions': questions_count,
                    'total_props': total_props,
                    'correct_props': correct_props,
                    'incorrect_props': incorrect_props,
                    'percentage_correct': (correct_props / total_props * 100) if total_props > 0 else 0
                }
                
                print(f"\nüìä QCM ID {qcm_id}:")
                print(f"   - Questions: {questions_count}")
                print(f"   - Propositions totales: {total_props}")
                print(f"   - Correctes: {correct_props} ({qcm_stats[qcm_id]['percentage_correct']:.1f}%)")
                print(f"   - Incorrectes: {incorrect_props}")
                
                if correct_props == 0:
                    print(f"   ‚ö†Ô∏è PROBL√àME: Aucune r√©ponse correcte identifi√©e!")
                elif qcm_stats[qcm_id]['percentage_correct'] < 20:
                    print(f"   ‚ö†Ô∏è SUSPECT: Tr√®s peu de r√©ponses correctes")
                else:
                    print(f"   ‚úÖ √âtat normal")
        
        return qcm_stats
        
    except Exception as e:
        print(f"‚ùå Erreur lors du diagnostic: {e}")
        import traceback
        traceback.print_exc()
        return None

def find_markdown_for_qcm(qcm_id):
    """Trouve le fichier Markdown correspondant √† un QCM"""
    print(f"üîç Recherche du fichier Markdown pour QCM ID {qcm_id}...")
    
    # Chercher dans le dossier outputs
    outputs_dir = Path("qcm_extraction/temp/outputs")
    if not outputs_dir.exists():
        print(f"‚ö†Ô∏è Dossier outputs non trouv√©: {outputs_dir}")
        return None
    
    # Parcourir tous les sous-dossiers
    for folder in outputs_dir.iterdir():
        if folder.is_dir():
            content_file = folder / "content.md"
            metadata_file = folder / "metadata.json"
            
            if content_file.exists() and metadata_file.exists():
                try:
                    import json
                    with open(metadata_file, 'r', encoding='utf-8') as f:
                        metadata = json.load(f)
                    
                    if metadata.get('qcm_db_id') == qcm_id:
                        print(f"‚úÖ Markdown trouv√©: {content_file}")
                        return str(content_file)
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lecture m√©tadonn√©es {metadata_file}: {e}")
                    continue
    
    print(f"‚ö†Ô∏è Markdown non trouv√© pour QCM ID {qcm_id}")
    return None

def extract_correct_answers_for_qcm(qcm_id):
    """Lance l'extraction des r√©ponses correctes pour un QCM sp√©cifique"""
    print(f"\nüîß EXTRACTION DES R√âPONSES CORRECTES - QCM ID {qcm_id}")
    print("=" * 50)
    
    try:
        extractor = QCMExtractor()
        
        # 1. Trouver le fichier Markdown
        markdown_path = find_markdown_for_qcm(qcm_id)
        if not markdown_path:
            print(f"‚ùå Impossible de traiter QCM ID {qcm_id}: Markdown non trouv√©")
            return False
        
        # 2. Lire le contenu Markdown
        with open(markdown_path, 'r', encoding='utf-8') as f:
            markdown_content = f.read()
        
        print(f"üìÑ Contenu Markdown charg√© ({len(markdown_content)} caract√®res)")
        
        # 3. Appeler la m√©thode extract_correct_answers
        print("üöÄ Lancement de l'extraction des r√©ponses correctes...")
        updates_count = extractor.extract_correct_answers(markdown_content, qcm_id)
        
        if updates_count and updates_count > 0:
            print(f"‚úÖ Extraction r√©ussie: {updates_count} r√©ponses mises √† jour")
            return True
        else:
            print("‚ö†Ô∏è Aucune mise √† jour effectu√©e (voir logs ci-dessus pour d√©tails)")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'extraction: {e}")
        import traceback
        traceback.print_exc()
        return False

def fix_extractor_integration():
    """Corrige l'int√©gration de extract_correct_answers dans le flux principal"""
    print("\nüîß INT√âGRATION DANS LE FLUX PRINCIPAL")
    print("=" * 50)
    
    extractor_file = Path("qcm_extraction/extractor.py")
    
    try:
        # Lire le fichier actuel
        with open(extractor_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier si extract_correct_answers est d√©j√† appel√©e
        if "self.extract_correct_answers(" in content:
            print("‚úÖ extract_correct_answers est d√©j√† int√©gr√©e dans le flux")
            return True
        
        # Chercher l'endroit o√π ajouter l'appel (apr√®s l'extraction des propositions)
        insertion_point = content.find('print("üèÅ Phase 2 termin√©e.")')
        
        if insertion_point == -1:
            print("‚ö†Ô∏è Point d'insertion non trouv√© dans extract_metadata_from_path")
            return False
        
        # Code √† ins√©rer
        code_to_insert = '''
                        
                        # Phase 3: Extraction des r√©ponses correctes
                        print("‚ñ∂Ô∏è Lancement de la Phase 3: Extraction des r√©ponses correctes...")
                        print("‚è∏Ô∏è Pause de 5 secondes avant l'extraction des r√©ponses correctes...")
                        time.sleep(5)
                        
                        updates_count = self.extract_correct_answers(markdown_content_for_processing, qcm_id_for_processing)
                        if updates_count and updates_count > 0:
                            print(f"‚úÖ Phase 3 termin√©e: {updates_count} r√©ponses correctes mises √† jour")
                            metadata["correct_answers_updated"] = updates_count
                        else:
                            print("‚ö†Ô∏è Phase 3: Aucune r√©ponse correcte mise √† jour")
                            metadata["correct_answers_updated"] = 0'''
        
        # Ins√©rer le code
        new_content = content[:insertion_point + len('print("üèÅ Phase 2 termin√©e.")')] + code_to_insert + content[insertion_point + len('print("üèÅ Phase 2 termin√©e.")'):]
        
        # Cr√©er une sauvegarde
        backup_file = extractor_file.with_suffix('.py.backup_before_correction')
        with open(backup_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"üíæ Sauvegarde cr√©√©e: {backup_file}")
        
        # √âcrire le nouveau contenu
        with open(extractor_file, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print("‚úÖ extract_correct_answers int√©gr√©e avec succ√®s dans le flux principal")
        print("‚ÑπÔ∏è D√©sormais, l'extraction des r√©ponses correctes sera automatique")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'int√©gration: {e}")
        return False

def verify_correction():
    """V√©rifie que la correction a fonctionn√©"""
    print("\nüî¨ V√âRIFICATION APR√àS CORRECTION")
    print("=" * 50)
    
    try:
        extractor = QCMExtractor()
        
        # Prendre le premier QCM pour v√©rification
        qcms = extractor.supabase.table('qcm').select('id').limit(1).execute()
        if not qcms.data:
            print("‚ùå Aucun QCM pour v√©rification")
            return False
        
        qcm_id = qcms.data[0]['id']
        
        # Compter les r√©ponses correctes maintenant
        questions = extractor.supabase.table('questions').select('id').eq('qcm_id', qcm_id).execute()
        if not questions.data:
            print(f"‚ùå Aucune question pour QCM ID {qcm_id}")
            return False
        
        total_correct = 0
        total_props = 0
        
        for q in questions.data:
            q_id = q['id']
            props = extractor.supabase.table('reponses').select('est_correcte').eq('question_id', q_id).execute()
            
            if props.data:
                total_props += len(props.data)
                total_correct += sum(1 for p in props.data if p['est_correcte'])
        
        percentage = (total_correct / total_props * 100) if total_props > 0 else 0
        
        print(f"üìä QCM ID {qcm_id} apr√®s correction:")
        print(f"   - Propositions totales: {total_props}")
        print(f"   - R√©ponses correctes: {total_correct}")
        print(f"   - Pourcentage: {percentage:.1f}%")
        
        if percentage > 0:
            print("‚úÖ SUCCESS: Des r√©ponses correctes ont √©t√© identifi√©es!")
            return True
        else:
            print("‚ö†Ô∏è PROBL√àME PERSISTANT: Aucune r√©ponse correcte")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def main():
    """Fonction principale de correction"""
    print("üöÄ CORRECTION DES R√âPONSES CORRECTES")
    print("=" * 60)
    
    # 1. Diagnostic initial
    stats = diagnose_current_state()
    if not stats:
        return
    
    # 2. Identifier les QCMs probl√©matiques
    problematic_qcms = []
    for qcm_id, data in stats.items():
        if data['correct_props'] == 0:
            problematic_qcms.append(qcm_id)
    
    if not problematic_qcms:
        print("\n‚úÖ Aucun probl√®me d√©tect√© - toutes les r√©ponses correctes sont identifi√©es")
        return
    
    print(f"\n‚ö†Ô∏è {len(problematic_qcms)} QCM(s) probl√©matique(s) d√©tect√©(s): {problematic_qcms}")
    
    # 3. Corriger chaque QCM probl√©matique
    for qcm_id in problematic_qcms:
        success = extract_correct_answers_for_qcm(qcm_id)
        if not success:
            print(f"‚ùå √âchec de la correction pour QCM ID {qcm_id}")
    
    # 4. Int√©grer dans le flux principal pour les futures extractions
    integration_success = fix_extractor_integration()
    
    # 5. V√©rification finale
    verify_correction()
    
    # 6. Instructions finales
    print("\nüìã INSTRUCTIONS FINALES")
    print("=" * 30)
    print("‚úÖ Les QCMs existants ont √©t√© corrig√©s")
    
    if integration_success:
        print("‚úÖ Le flux principal a √©t√© mis √† jour")
        print("‚ÑπÔ∏è Les futures extractions incluront automatiquement les r√©ponses correctes")
    else:
        print("‚ö†Ô∏è L'int√©gration automatique a √©chou√©")
        print("‚ÑπÔ∏è Vous devrez appeler manuellement extract_correct_answers() apr√®s chaque extraction")
    
    print("\nüéØ SYST√àME MAINTENANT SCALABLE")

if __name__ == "__main__":
    main() 