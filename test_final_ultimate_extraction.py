#!/usr/bin/env python3
"""
Test FINAL pour l'extraction exhaustive et parfaite
Cette version teste la nouvelle logique qui devrait extraire TOUTES les questions
"""

import os
import sys
from pathlib import Path

# Ajouter le chemin du module
sys.path.append(str(Path(__file__).parent / "qcm_extraction"))

from extractor import QCMExtractor

def test_ultimate_extraction():
    """Test final pour extraction exhaustive de TOUTES les questions"""
    print("üöÄ TEST FINAL - EXTRACTION EXHAUSTIVE ET PARFAITE")
    print("=" * 70)
    
    pdf_url = "https://ityugjyhrtvlvhbyohyi.supabase.co/storage/v1/object/public/qcm_pdfs/Nancy/UE2/QCM/ue2-correction-colle1-s38-21-22-47305.pdf"
    
    try:
        # Initialiser l'extracteur
        extractor = QCMExtractor()
        
        print("üßπ V√©rification de l'√©tat de la base de donn√©es...")
        
        # V√©rifier s'il y a d√©j√† des donn√©es
        qcms = extractor.supabase.table('qcm').select('id').execute()
        if qcms.data:
            print(f"‚ÑπÔ∏è {len(qcms.data)} QCM(s) trouv√©(s) en base")
        else:
            print("‚úÖ Base de donn√©es vide, pr√™te pour l'extraction")
        
        print("üì• Lancement de l'extraction exhaustive...")
        metadata = extractor.extract_metadata_from_path(pdf_url)
        
        if not metadata:
            print("‚ùå √âchec de l'extraction")
            return
        
        print("\n" + "="*50)
        print("üìä R√âSULTATS DE L'EXTRACTION EXHAUSTIVE")
        print("="*50)
        
        # V√©rifier les questions
        qcm_id = metadata.get('id')
        if qcm_id:
            questions_result = extractor.supabase.table('questions').select('numero, id').eq('qcm_id', qcm_id).order('numero').execute()
            questions = questions_result.data if questions_result.data else []
            
            question_numbers = [q['numero'] for q in questions]
            print(f"üéØ Questions extraites: {len(questions)}/30")
            print(f"üìã Num√©ros trouv√©s: {sorted(question_numbers)}")
            
            # V√©rifier la question 9 sp√©cifiquement
            if 9 in question_numbers:
                print("‚úÖ Question 9 TROUV√âE !")
            else:
                print("‚ùå Question 9 MANQUANTE")
            
            # V√©rifier la question 26
            if 26 in question_numbers:
                print("‚úÖ Question 26 TROUV√âE !")
            else:
                print("‚ùå Question 26 MANQUANTE")
            
            # Identifier les questions manquantes
            if questions:
                expected_questions = set(range(1, 31))
                found_questions = set(question_numbers)
                missing_questions = expected_questions - found_questions
                if missing_questions:
                    print(f"‚ö†Ô∏è Questions manquantes: {sorted(missing_questions)}")
                else:
                    print("üéâ TOUTES les questions sont pr√©sentes !")
            
            # V√©rifier les propositions
            total_propositions = 0
            questions_with_5_props = 0
            
            for q in questions:
                props_result = extractor.supabase.table('reponses').select('lettre').eq('question_id', q['id']).execute()
                props_count = len(props_result.data) if props_result.data else 0
                total_propositions += props_count
                
                if props_count == 5:
                    questions_with_5_props += 1
                elif props_count != 5:
                    print(f"‚ö†Ô∏è Q{q['numero']}: {props_count} propositions au lieu de 5")
            
            print(f"üìÑ Propositions extraites: {total_propositions}")
            print(f"‚úÖ Questions avec 5 propositions: {questions_with_5_props}/{len(questions)}")
            
            # √âvaluation globale
            completeness_score = len(questions) / 30 * 100
            print(f"\nüéØ SCORE DE COMPL√âTUDE: {completeness_score:.1f}%")
            
            if completeness_score >= 100:
                print("üèÜ EXTRACTION PARFAITE - TOUTES LES QUESTIONS TROUV√âES !")
            elif completeness_score >= 90:
                print("ü•à EXTRACTION EXCELLENTE - Presque parfaite")
            elif completeness_score >= 80:
                print("ü•â EXTRACTION BONNE - Acceptable")
            else:
                print("‚ùå EXTRACTION INSUFFISANTE - N√©cessite am√©lioration")
            
            # Recommandations
            if missing_questions:
                print(f"\nüí° RECOMMANDATIONS:")
                print(f"   - V√©rifier manuellement les questions {sorted(missing_questions)} dans le PDF")
                print(f"   - Analyser le formatage de ces questions dans le markdown")
                
        else:
            print("‚ùå Impossible de r√©cup√©rer l'ID du QCM")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_ultimate_extraction() 