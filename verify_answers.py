from qcm_extraction.extractor import QCMExtractor
import base64
import json
import os
import re

# QCM ID sp√©cifique √† v√©rifier
QCM_ID = 1

def verify_correct_answers_with_vision(image_path, question_num):
    """
    Utilise l'API vision pour v√©rifier les r√©ponses correctes √† une question sp√©cifique.
    """
    try:
        print(f"üîç Analyse de l'image {image_path} pour la question {question_num}...")
        
        # Initialiser l'extracteur
        extractor = QCMExtractor()
        
        # Encoder l'image en base64
        with open(image_path, "rb") as image_file:
            base64_image = base64.b64encode(image_file.read()).decode("utf-8")
        
        # Construire les messages pour l'API vision
        messages = [
            {
                "role": "user",
                "content": [
                    {
                        "type": "text", 
                        "text": f"""Analyse cette image d'un QCM m√©dical et identifie les R√âPONSES CORRECTES pour la Question {question_num} uniquement.

CONSIGNES PR√âCISES:
1. Cherche UNIQUEMENT la Question {question_num} et ses r√©ponses correctes
2. Cherche des indications comme "R√©ponses justes", "R√©ponses correctes", "Bonnes r√©ponses", etc.
3. Tu peux aussi rep√©rer les r√©ponses marqu√©es individuellement comme "Vrai" ou "Faux" 
4. Si plusieurs r√©ponses sont correctes, liste-les toutes (A, B, C, D, E)

R√âPONDS UNIQUEMENT AU FORMAT JSON:
{{
  "question_num": {question_num},
  "correct_answers": ["A", "C", "E"],  // Liste des lettres correctes uniquement (A, B, C, D, E)
  "confidence": 0.95,  // Ta confiance dans ta r√©ponse de 0 √† 1
  "explanation": "J'ai trouv√© ces r√©ponses car..."  // Br√®ve explication
}}

N'ajoute AUCUN texte avant ou apr√®s ce JSON."""
                    },
                    {
                        "type": "image_url",
                        "image_url": f"data:image/jpeg;base64,{base64_image}"
                    }
                ]
            }
        ]
        
        # Appeler l'API vision
        response = extractor._call_api_with_retry(
            extractor.client.chat.complete,
            model="mistral-large-latest",  # Utiliser le mod√®le large qui a de meilleures capacit√©s de vision
            messages=messages,
            temperature=0.0,
            response_format={"type": "json_object"}
        )
        
        if response is None:
            print(f"‚ùå √âchec de l'appel API vision pour la question {question_num}")
            return None
        
        try:
            # Extraire le JSON de la r√©ponse
            content = response.choices[0].message.content.strip()
            result = json.loads(content)
            
            # V√©rifier que la structure du r√©sultat est correcte
            if "question_num" in result and "correct_answers" in result:
                verified_num = result["question_num"]
                
                # V√©rifier que la r√©ponse concerne bien la question demand√©e
                if verified_num == question_num:
                    correct_answers = result["correct_answers"]
                    confidence = result.get("confidence", 0)
                    explanation = result.get("explanation", "")
                    
                    print(f"‚úÖ R√©ponses identifi√©es par vision pour Q{question_num}: {', '.join(correct_answers)} (confiance: {confidence:.2f})")
                    print(f"‚ÑπÔ∏è Explication: {explanation}")
                    
                    return result
                else:
                    print(f"‚ö†Ô∏è La r√©ponse concerne la question {verified_num}, mais nous cherchions la question {question_num}")
            else:
                print(f"‚ö†Ô∏è R√©ponse API mal format√©e pour la question {question_num}")
                
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è Impossible de d√©coder la r√©ponse JSON pour la question {question_num}")
            
        return None
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des r√©ponses avec vision: {str(e)}")
        return None

def update_correct_answers(qcm_id, question_num, correct_letters):
    """
    Met √† jour les r√©ponses correctes pour une question sp√©cifique.
    """
    extractor = QCMExtractor()
    
    # R√©cup√©rer l'ID de la question
    questions = extractor.supabase.table('questions').select('id').eq('qcm_id', qcm_id).eq('numero', question_num).execute()
    
    if not questions.data:
        print(f"‚ö†Ô∏è Question {question_num} non trouv√©e dans la base de donn√©es")
        return False
    
    question_id = questions.data[0]['id']
    
    # R√©cup√©rer toutes les r√©ponses pour cette question
    responses = extractor.supabase.table('reponses').select('id', 'lettre').eq('question_id', question_id).execute()
    
    if not responses.data:
        print(f"‚ö†Ô∏è Aucune r√©ponse trouv√©e pour la question {question_num}")
        return False
    
    # Mettre √† jour chaque r√©ponse
    update_count = 0
    for response in responses.data:
        response_id = response['id']
        lettre = response['lettre']
        
        # D√©terminer si cette r√©ponse est correcte
        est_correcte = lettre in correct_letters
        
        # Mettre √† jour dans Supabase
        result = extractor.supabase.table('reponses').update({"est_correcte": est_correcte}).eq('id', response_id).execute()
        
        if result.data:
            update_count += 1
            status = "correcte" if est_correcte else "incorrecte"
            print(f"‚úÖ Proposition {lettre} marqu√©e comme {status}")
    
    print(f"‚úÖ {update_count} propositions mises √† jour pour la question {question_num}")
    return update_count > 0

def main():
    print(f"üöÄ V√©rification et correction des r√©ponses pour le QCM ID {QCM_ID}...")
    
    # Initialiser l'extracteur
    extractor = QCMExtractor()
    
    # T√©l√©charger le PDF si n√©cessaire
    qcm_info = extractor.supabase.table('qcm').select('*').eq('id', QCM_ID).execute()
    if not qcm_info.data:
        print(f"‚ùå QCM ID {QCM_ID} non trouv√© dans la base de donn√©es")
        return
    
    # R√©cup√©rer les images des pages pour ce QCM
    # Trouver le chemin des images en fonction du QCM
    pdf_files = [f for f in os.listdir("qcm_extraction/temp/pdfs") if os.path.isdir(os.path.join("qcm_extraction/temp/pdfs", f))]
    
    for pdf_folder in pdf_files:
        images_dir = f"qcm_extraction/temp/images/{pdf_folder}"
        if os.path.exists(images_dir):
            # V√©rifier si ce dossier correspond au QCM 1
            # Pour cela, on v√©rifie si un fichier dans le dossier outputs contient les m√©tadonn√©es de ce QCM
            metadata_path = f"qcm_extraction/temp/outputs/{pdf_folder}/metadata.json"
            if os.path.exists(metadata_path):
                try:
                    with open(metadata_path, "r", encoding="utf-8") as f:
                        metadata = json.load(f)
                        # V√©rifier si ce QCM est celui qui nous int√©resse
                        if "qcm_db_id" in metadata and metadata["qcm_db_id"] == QCM_ID:
                            print(f"‚úÖ Trouv√© les images pour le QCM ID {QCM_ID} dans {images_dir}")
                            
                            # V√©rifier la question 1 avec les pages 1-4
                            question_num = 1
                            for page_num in range(1, 6):  # Pages 1 √† 5
                                image_path = f"{images_dir}/page_{page_num}.jpg"
                                if os.path.exists(image_path):
                                    print(f"üîç V√©rification de la question {question_num} avec la page {page_num}...")
                                    result = verify_correct_answers_with_vision(image_path, question_num)
                                    
                                    if result and "correct_answers" in result:
                                        correct_letters = result["correct_answers"]
                                        print(f"‚úÖ R√©ponses correctes pour la question {question_num}: {', '.join(correct_letters)}")
                                        
                                        # Mettre √† jour dans la base de donn√©es
                                        update_correct_answers(QCM_ID, question_num, correct_letters)
                                        break
                except Exception as e:
                    print(f"‚ùå Erreur lors de la lecture des m√©tadonn√©es: {str(e)}")
    
    # Si on n'a pas trouv√© de dossier pour ce QCM, afficher un message d'erreur
    print("\nüîç V√©rification de l'√©tat actuel de la question 1:")
    questions = extractor.supabase.table('questions').select('id').eq('qcm_id', QCM_ID).eq('numero', 1).execute()
    if questions.data:
        q_id = questions.data[0]['id']
        reponses = extractor.supabase.table('reponses').select('*').eq('question_id', q_id).execute()
        correct_letters = []
        for r in reponses.data:
            status = "‚úì" if r['est_correcte'] else "‚úó"
            print(f"Proposition {r['lettre']}: {status} {r['contenu']}")
            if r['est_correcte']:
                correct_letters.append(r['lettre'])
        
        print(f"\n‚úÖ Bonnes r√©ponses actuelles: {', '.join(correct_letters)}")

if __name__ == "__main__":
    main() 