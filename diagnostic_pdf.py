#!/usr/bin/env python3
"""
Script de diagnostic pour analyser les probl√®mes d'extraction dans un PDF
Permet d'identifier pourquoi certaines questions ou propositions sont manquantes
"""

import os
import sys
import re
from pathlib import Path

# Ajouter le chemin du module
sys.path.append(str(Path(__file__).parent / "qcm_extraction"))

from extractor import QCMExtractor

def diagnostic_question_manquante(markdown_content: str, question_num: int):
    """Diagnostic sp√©cifique pour une question manquante"""
    print(f"\nüîç DIAGNOSTIC: Question {question_num}")
    print("-" * 30)
    
    # Patterns de recherche pour la question
    patterns = [
        rf'Q\.?\s*{question_num}[\.:\)]',
        rf'Question\s*{question_num}[\.:\)]',
        rf'{question_num}\.(?!\d)',  # √âviter 19.5 etc.
        rf'{question_num}\)',
        rf'{question_num}:',
        rf'Q{question_num}[^0-9]',
    ]
    
    found_positions = []
    
    for i, pattern in enumerate(patterns):
        matches = list(re.finditer(pattern, markdown_content, re.IGNORECASE))
        for match in matches:
            start = max(0, match.start() - 50)
            end = min(len(markdown_content), match.end() + 200)
            context = markdown_content[start:end].replace('\n', ' ')
            found_positions.append({
                'pattern': i + 1,
                'position': match.start(),
                'context': context,
                'match': match.group()
            })
    
    if found_positions:
        print(f"‚úÖ Question {question_num} trouv√©e {len(found_positions)} fois:")
        for fp in found_positions:
            print(f"  Pattern {fp['pattern']}: '{fp['match']}' √† pos {fp['position']}")
            print(f"    Contexte: ...{fp['context']}...")
        
        # Analyser pourquoi elle n'a pas √©t√© extraite
        print("\nü§î Analyse des raisons possibles:")
        print("  - V√©rifiez si le texte de la question suit imm√©diatement")
        print("  - V√©rifiez s'il y a des caract√®res sp√©ciaux ou formatage √©trange")
        print("  - V√©rifiez si la question est coup√©e entre plusieurs pages")
    else:
        print(f"‚ùå Question {question_num} NON TROUV√âE dans le texte")
        
        # Recherche de variations possibles
        print("\nüîç Recherche de variations possibles...")
        variations = [
            rf'{question_num}√®me',
            rf'{question_num}e',
            rf'question\s*{question_num}',
            rf'n¬∞\s*{question_num}',
        ]
        
        for var in variations:
            matches = list(re.finditer(var, markdown_content, re.IGNORECASE))
            if matches:
                for match in matches:
                    start = max(0, match.start() - 30)
                    end = min(len(markdown_content), match.end() + 100)
                    context = markdown_content[start:end].replace('\n', ' ')
                    print(f"  Trouv√© variation: '{match.group()}' -> ...{context}...")

def diagnostic_propositions_manquantes(markdown_content: str, question_num: int):
    """Diagnostic pour les propositions manquantes d'une question"""
    print(f"\nüîç DIAGNOSTIC: Propositions de la question {question_num}")
    print("-" * 40)
    
    # Trouver la position de la question
    question_pos = None
    question_patterns = [
        rf'Q\.?\s*{question_num}[\.:\)]',
        rf'Question\s*{question_num}[\.:\)]',
        rf'{question_num}\.',
    ]
    
    for pattern in question_patterns:
        match = re.search(pattern, markdown_content, re.IGNORECASE)
        if match:
            question_pos = match.start()
            break
    
    if question_pos is None:
        print(f"‚ùå Impossible de localiser la question {question_num}")
        return
    
    # Analyser une zone autour de la question (2000 caract√®res)
    search_zone = markdown_content[question_pos:question_pos + 2000]
    
    print(f"üìç Question trouv√©e √† la position {question_pos}")
    print("üîç Recherche des propositions A, B, C, D, E...")
    
    found_props = {}
    missing_props = []
    
    for letter in "ABCDE":
        patterns = [
            rf'{letter}\.\s*([^\n]*?)(?=[A-E]\.|\n\n|$)',
            rf'{letter}\)\s*([^\n]*?)(?=[A-E]\)|\n\n|$)',
            rf'{letter}\s*:\s*([^\n]*?)(?=[A-E]\s*:|\n\n|$)',
            rf'{letter}\s*-\s*([^\n]*?)(?=[A-E]\s*-|\n\n|$)',
            rf'{letter}\s+([^\n]*?)(?=[A-E]\s|\n\n|$)'
        ]
        
        found = False
        for pattern in patterns:
            match = re.search(pattern, search_zone, re.IGNORECASE)
            if match:
                prop_text = match.group(1).strip()
                if len(prop_text) > 3:
                    found_props[letter] = prop_text[:50] + "..." if len(prop_text) > 50 else prop_text
                    found = True
                    break
        
        if not found:
            missing_props.append(letter)
    
    # Afficher les r√©sultats
    print(f"\n‚úÖ Propositions trouv√©es ({len(found_props)}/5):")
    for letter, text in found_props.items():
        print(f"  {letter}: {text}")
    
    if missing_props:
        print(f"\n‚ùå Propositions manquantes: {missing_props}")
        print("\nüîç Recherche √©tendue dans la zone...")
        
        # Afficher le contexte brut pour inspection manuelle
        print("\nüìÑ Contexte brut (premiers 500 caract√®res):")
        print(search_zone[:500])
        print("\nüìÑ Contexte brut (derniers 500 caract√®res):")
        print(search_zone[-500:])
    else:
        print("\nüéâ Toutes les propositions trouv√©es!")

def run_full_diagnostic():
    """Diagnostic complet du PDF"""
    print("üî¨ DIAGNOSTIC COMPLET DU PDF")
    print("=" * 50)
    
    # URL du PDF de test
    pdf_url = "https://ityugjyhrtvlvhbyohyi.supabase.co/storage/v1/object/public/qcm_pdfs/Nancy/UE2/QCM/ue2-correction-colle1-s38-21-22-47305.pdf"
    
    try:
        # Initialiser l'extracteur
        extractor = QCMExtractor()
        
        # T√©l√©charger et convertir en markdown
        print("üì• T√©l√©chargement et conversion du PDF...")
        pdf_path = extractor.download_pdf(pdf_url)
        markdown_path = extractor.convert_pdf_to_markdown(pdf_path, pdf_url)
        
        if not markdown_path:
            print("‚ùå √âchec de la conversion en markdown")
            return
        
        # Lire le contenu markdown
        with open(markdown_path, "r", encoding="utf-8") as f:
            markdown_content = f.read()
        
        print(f"üìÑ Markdown g√©n√©r√©: {len(markdown_content)} caract√®res")
        
        # Diagnostic g√©n√©ral
        print("\nüîç ANALYSE G√âN√âRALE:")
        print(f"  - Longueur du texte: {len(markdown_content)} caract√®res")
        lines_count = len(markdown_content.split('\n'))
        print(f"  - Nombre de lignes: {lines_count}")
        
        # D√©tecter les pages
        pages = re.findall(r'^# Page \d+', markdown_content, re.MULTILINE)
        print(f"  - Pages d√©tect√©es: {len(pages)}")
        
        # D√©tecter tous les num√©ros de questions
        all_question_matches = re.findall(r'(?:Q\.?\s*(\d+)|Question\s*(\d+)|(\d+)\.)', markdown_content, re.IGNORECASE)
        detected_numbers = set()
        for match in all_question_matches:
            for group in match:
                if group:
                    try:
                        num = int(group)
                        if 1 <= num <= 50:  # Filtre raisonnable
                            detected_numbers.add(num)
                    except ValueError:
                        pass
        
        detected_numbers = sorted(detected_numbers)
        print(f"  - Num√©ros de questions d√©tect√©s: {detected_numbers}")
        
        if detected_numbers:
            expected_range = list(range(min(detected_numbers), max(detected_numbers) + 1))
            missing_in_sequence = set(expected_range) - set(detected_numbers)
            if missing_in_sequence:
                print(f"  - Questions manquantes dans la s√©quence: {sorted(missing_in_sequence)}")
            else:
                print("  - ‚úÖ S√©quence de questions compl√®te")
        
        # Diagnostic sp√©cifique pour la question 9
        if 9 not in detected_numbers:
            diagnostic_question_manquante(markdown_content, 9)
        else:
            print("\n‚úÖ Question 9 d√©tect√©e dans l'analyse g√©n√©rale")
            diagnostic_propositions_manquantes(markdown_content, 9)
        
        # Diagnostic pour quelques autres questions critiques
        critical_questions = [1, 15, 16, 20, 25, 30]
        for q_num in critical_questions:
            if q_num not in detected_numbers:
                diagnostic_question_manquante(markdown_content, q_num)
            else:
                # V√©rification rapide des propositions
                question_pos = None
                for pattern in [rf'Q\.?\s*{q_num}[\.:\)]', rf'{q_num}\.']:
                    match = re.search(pattern, markdown_content, re.IGNORECASE)
                    if match:
                        question_pos = match.start()
                        break
                
                if question_pos:
                    search_zone = markdown_content[question_pos:question_pos + 1000]
                    props_found = len(re.findall(r'[A-E]\.', search_zone))
                    print(f"‚úÖ Question {q_num}: ~{props_found} propositions d√©tect√©es")
        
        print("\nüéØ RECOMMANDATIONS:")
        print("1. V√©rifiez les questions manquantes identifi√©es ci-dessus")
        print("2. Examinez le formatage des questions probl√©matiques")
        print("3. V√©rifiez si certaines questions sont coup√©es entre les pages")
        print("4. Relancez l'extraction apr√®s corrections si n√©cessaire")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du diagnostic: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    run_full_diagnostic() 