from dotenv import load_dotenv
import time
import os

# S'assurer que le chemin d'importation pour qcm_extraction est correct
# Si run_test.py est √† la racine du projet, et qcm_extraction est un dossier √† la racine
try:
    from qcm_extraction.extractor import QCMExtractor
except ImportError:
    # Alternative si le script est ex√©cut√© depuis un autre endroit ou si PYTHONPATH n'est pas configur√©
    import sys
    # Ajouter le r√©pertoire parent au chemin (si qcm_extraction est un module fr√®re)
    # Ou ajuster selon la structure de votre projet
    sys.path.append(os.path.dirname(os.path.abspath(__file__))) # Ajoute le r√©pertoire courant
    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')) # Ajoute le r√©pertoire parent

    from qcm_extraction.extractor import QCMExtractor


if __name__ == "__main__":
    load_dotenv() # Charger les variables d'environnement depuis .env

    # R√©cup√©rer les variables d'environnement
    mistral_api_key = os.getenv("MISTRAL_API_KEY")
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_KEY")

    if not all([mistral_api_key, supabase_url, supabase_key]):
        print("Erreur: Les variables d'environnement MISTRAL_API_KEY, SUPABASE_URL, et SUPABASE_KEY doivent √™tre d√©finies.")
        print("Veuillez cr√©er un fichier .env √† la racine du projet avec ces variables ou les d√©finir dans votre environnement.")
        exit(1)

    # Initialiser l'extracteur avec les cl√©s charg√©es
    # Note: QCMExtractor peut aussi charger depuis os.getenv par d√©faut si les args sont None
    extractor = QCMExtractor(api_key=mistral_api_key, supabase_url=supabase_url, supabase_key=supabase_key)
    
    # URL du PDF √† traiter
    pdf_url = "https://ityugjyhrtvlvhbyohyi.supabase.co/storage/v1/object/public/qcm_pdfs/Nancy/UE1/QCM/ue1-correction-colle-2-s42-2021-49647.pdf"
    
    print(f"üöÄ Lancement du traitement complet pour: {pdf_url}")
    
    # √âtape 1 & 2: Extraction des m√©tadonn√©es, questions et propositions
    extracted_metadata = extractor.extract_metadata_from_path(pdf_url)
    
    if extracted_metadata and extracted_metadata.get("qcm_db_id") and extracted_metadata.get("markdown_path"):
        qcm_id = extracted_metadata["qcm_db_id"]
        markdown_path = extracted_metadata["markdown_path"]
        
        print(f"\n‚úÖ M√©tadonn√©es, questions et propositions extraites pour QCM ID: {qcm_id}")
        print(f"üìÑ Fichier Markdown g√©n√©r√©: {markdown_path}")
        
        # Lire le contenu Markdown pour l'√©tape suivante
        try:
            with open(markdown_path, "r", encoding="utf-8") as f:
                markdown_content = f.read()
            
            # √âtape 3: Extraction des r√©ponses correctes
            print("\n‚ñ∂Ô∏è Lancement de la Phase 3: Extraction des r√©ponses correctes...")
            print("‚è∏Ô∏è Pause de 5 secondes avant l'extraction des r√©ponses correctes...")
            time.sleep(5)
            
            extractor.extract_correct_answers(markdown_content, qcm_id)
            
            print("\nüéâ Traitement complet termin√©.")
            
        except FileNotFoundError:
            print(f"‚ùå Erreur: Le fichier Markdown {markdown_path} n'a pas √©t√© trouv√© pour l'extraction des r√©ponses correctes.")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'extraction des r√©ponses correctes: {str(e)}")
            import traceback
            traceback.print_exc()
            
    elif extracted_metadata:
        print("‚ö†Ô∏è Le traitement s'est arr√™t√© apr√®s l'extraction des m√©tadonn√©es car qcm_db_id ou markdown_path est manquant.")
        print(f"   D√©tails des m√©tadonn√©es: {extracted_metadata}")
    else:
        print("‚ùå √âchec de l'extraction des m√©tadonn√©es. Le traitement ne peut pas continuer.") 